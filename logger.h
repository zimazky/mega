#ifndef logger_h
#define logger_h
//
// Событийный вывод в лог-файлы. Один поток выводится в отдельный файл. Номер потока и его тип отражается в имени файла.
//   YYYYMMDD.z1 - поток (лог) температурной зоны номер 1
//   YYYYMMDD.z2 - поток (лог) температурной зоны номер 2
//   YYYYMMDD.t  - поток (лог) тикера
//
// Лог температурной зоны:
// Строка представляет собой событие. Событие может выводиться двумя типами записей: 
//   - полная запись (первая запись в логе или после перезагрузки);
//   - разностная запись (записывается разность между текущим значением и предыдущим).
// Порядок полей при выводе событий:
// 1. Флаги событий int8_t
//    1 - Изменение фактической температуры
//    2 - Изменение фактической влажности
//    4 - Бит подачи мощности на обогреватель
//    8 - Бит режима работы
//   16 - Изменение заданной температуры
//   32 - Изменение заданного гистерезиса температуры
//   64 - Изменение состояния датчика
//  128 - Признак полной записи (выводятся все поля в виде полного значения)
// 2. Метка времени. Тип unixtime, выводится разница с предыдущим значением в потоке.
// Далее в соответствии с установленными битами флагов событий выводятся параметры:
// 3. Фактическая температура. Тип int, выводится разница с предыдущим значением в потоке.
// 4. Фактическая влажность. Тип int, выводится разница с предыдущим значением в потоке.
// 5. Заданная температура. Тип int, выводится разница с предыдущим значением в потоке.
// 6. Заданный гистерезис температуры. Тип int, выводится разница с предыдущим значением в потоке.
// 7. Состояние датчика.  Тип int, выводится полное значение.
//
// Лог тикера:
// 1. Метка времени. Тип unixtime, выводится разница с предыдущим значением в потоке.
// 2. Время с начала работы устройства. Выводится разница с предыдущим значением в потоке.
// 3. Если была попытка синхронизации, то код завершения (ok,err).
// 4. Если синхронизация произошла успешно, то дельта синхронизации.


#include <Print.h>

class logger : public Print {
public:
  void begin();
  virtual size_t write(uint8_t);
  virtual size_t write(const uint8_t *buf, size_t size);
};

#endif
//
// END OF FILE
//
